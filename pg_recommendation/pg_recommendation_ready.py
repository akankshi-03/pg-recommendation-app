# -*- coding: utf-8 -*-
"""pg_recommendation_ready.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vHTVcwZvvrMONKphuxpIc4_UDWJHBZE6
"""

import pandas as pd
import numpy as np
from sklearn.neighbors import NearestNeighbors
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import IsolationForest

# 1️⃣ Load Dataset
csv_file = '/content/greater_noida_data/cleanedDataset.csv'
data = pd.read_csv(csv_file)
data = data.drop(['Unnamed: 0'], axis=1)  # drop index column

# 2️⃣ Prepare Features
X_rent = data[['Occupancy', 'Attached BathRoom', 'AB', 'TV', 'AC', 'CUPBOARD', 'BEDDING', 'GEASER']]
y_rent = data['Rent']

# 3️⃣ Train Models
rent_model = LinearRegression()
rent_model.fit(X_rent, y_rent)

knn_model = NearestNeighbors(n_neighbors=5, metric='euclidean')
knn_model.fit(X_rent)

fraud_model = IsolationForest(contamination=0.05, random_state=42)
fraud_model.fit(X_rent)

# 4️⃣ User Preferences (Normal English / easy)
print("Enter your preferences (0 = No, 1 = Yes):")
user_input_dict = {
    "Occupancy": int(input("How many people will stay in PG? ")),
    "Attached BathRoom": int(input("Do you want attached bathroom? ")),
    "AB": int(input("AB (Bed availability)? ")),
    "TV": int(input("TV available? ")),
    "AC": int(input("AC available? ")),
    "CUPBOARD": int(input("Cupboard available? ")),
    "BEDDING": int(input("Bedding included? ")),
    "GEASER": int(input("Geyser available? "))
}

# Convert to DataFrame (for KNN)
user_input = pd.DataFrame([user_input_dict])

# 5️⃣ PG Recommendation (KNN)
distances, indices = knn_model.kneighbors(user_input)
recommended_pgs = data.iloc[indices[0]].copy()

# 6️⃣ Predicted Rent
recommended_pgs['Predicted_Rent'] = rent_model.predict(recommended_pgs[X_rent.columns])

# 7️⃣ Fraud Detection
recommended_pgs['Fraud_Flag'] = fraud_model.predict(recommended_pgs[X_rent.columns])
recommended_pgs['Fraud_Flag'] = recommended_pgs['Fraud_Flag'].apply(lambda x: True if x==-1 else False)

# 8️⃣ Satisfaction Score (1–10)
recommended_pgs['Satisfaction_Score'] = 5 + recommended_pgs[['AB','TV','AC','CUPBOARD','BEDDING','GEASER']].sum(axis=1)*0.5
recommended_pgs['Satisfaction_Score'] = recommended_pgs['Satisfaction_Score'].clip(upper=10)

# 9️⃣ Show Final Output
final_columns = ['Rent','Predicted_Rent','Satisfaction_Score','Fraud_Flag',
                 'Occupancy','Attached BathRoom','AB','TV','AC','CUPBOARD','BEDDING','GEASER']
final_output = recommended_pgs[final_columns]

print("\nTop 5 PG Recommendations for you:")
print(final_output)

